#!/usr/bin/env python
# fusetester 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy
import sys
import subprocess
import json
import time

@dxpy.entry_point('main')
def main(bamfiles, baifiles, extracommands=None):

    mapping = dict([(item[u'$dnanexus_link'], "input%04d.bam"%i) for (i, item) in enumerate(bamfiles)])
    mapping.update([(item[u'$dnanexus_link'], "input%04d.bai"%i) for (i, item) in enumerate(baifiles)])

    #print subprocess.check_output(["dpkg", "-l"])

    os.makedirs("dxfuse")

    subprocess.call(["/opt/lldxfuse.py", "dxfuse",  json.dumps(mapping)])

    print subprocess.check_output(["mount"])
    print subprocess.check_output(["ls", "-la", "dxfuse"])

    for i in range(len(bamfiles)):
        print "Input #%d has %s reads mapping to chromosome 22"%(i,
            subprocess.check_output("samtools view dxfuse/input%04d.bam 22 | wc -l"%i, shell=True))

    print "Unmounting filesystem... " + subprocess.check_output(["fusermount", "-u", "dxfuse"])

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    #report = dxpy.upload_local_file("report");

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}

    return output

dxpy.run()
